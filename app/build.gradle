//file:noinspection DependencyNotationArgument
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.kotlinAndroid)
}

static def getGitRevision() {
    return "git rev-parse --short HEAD".execute().text.trim()
}

def getGitHash = { ->
    def process = "git rev-parse HEAD".execute()
    process.in.text.trim()
}

android {
    compileSdk 34

    defaultConfig {
        namespace 'com.sevtinge.hyperceiler'
        applicationId namespace
        minSdk 30
        targetSdk 34
        versionCode 136
        versionName "2.3.136"
        project.archivesBaseName = "HyperCeiler"
        ndk {
            // noinspection ChromeOsAbiSupport
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }
        applicationVariants.configureEach { variant ->
            variant.outputs.configureEach {
                outputFileName = project.archivesBaseName + "_" + versionName + "(" + versionCode + ")_" + variant.buildType.name + ".apk"
            }
        }
        buildConfigField "String", "BUILD_TIME", "\"${new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("UTC"))}\""
    }

    buildFeatures {
        buildConfig = true
    }

    androidResources {
        generateLocaleConfig = true
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/**"
            excludes += "/kotlin/**"
            excludes += "/*.txt"
            excludes += "/*.bin"
            excludes += "/*.json"
        }
        dex {
            useLegacyPackaging = true
        }
    }

    def properties
    def propertiesFile = rootProject.file('signing.properties')
    if (propertiesFile.exists()) {
        properties = new Properties()
        properties.load(propertiesFile.newDataInputStream())
    }
    def getString = { String propertyName, String environmentName, String prompt ->
        return properties?.get(propertyName) ?: System.getenv(environmentName) ?:
            System.console()?.readLine('\n' + prompt + ': ')
    }
    def keyStoreFile = getString('storeFile', 'STORE_FILE', 'Store file')?.with(rootProject.&file)

    signingConfigs {
        hyperceiler {
            if (keyStoreFile != null) {
                storeFile keyStoreFile
                storePassword getString('storePassword', 'STORE_PASSWORD', 'Store password')
                keyAlias getString('keyAlias', 'KEY_ALIAS', 'Key alias')
                keyPassword getString('keyPassword', 'KEY_PASSWORD', 'Key password')
                enableV3Signing true
                enableV4Signing true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-log.pro'
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now())
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
        beta {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now())
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
        canary {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now()) + "_" + getGitRevision()
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
        debug {
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now()) + "_" + getGitRevision()
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_19
        targetCompatibility JavaVersion.VERSION_19
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_19.toString()
    }

}

dependencies {
    compileOnly(project(":hidden-api"))

    compileOnly files('libs/miui.jar')
    compileOnly files("libs/miui-framework.jar")

    compileOnly libs.xposed.api

    implementation libs.dexkit
    implementation libs.tinyPinyin
    implementation libs.ezXHelper
    implementation libs.accompanist.systemuicontroller
    implementation libs.hiddenapibypass
    implementation libs.gson
    implementation libs.commons.codec

    implementation libs.core
    implementation libs.collection
    implementation libs.recyclerview
    implementation libs.fragment
    implementation libs.lifecycle.common
    implementation libs.vectordrawable
    implementation libs.vectordrawable.animated
    implementation libs.customview
    implementation libs.customview.poolingcontainer
    implementation libs.constraintlayout

    implementation files(roots.animation)
    implementation files(roots.appcompat)
    implementation files(roots.core)
    implementation files(roots.haptic)
    implementation files(roots.preference)
    implementation files(roots.smooth)
    implementation files(roots.springback)
    implementation files(roots.external)

    implementation files("libs/hyperceiler_expansion_packs-debug.aar")
}
