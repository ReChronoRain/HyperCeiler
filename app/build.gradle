//file:noinspection DependencyNotationArgument
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

static def getGitRevision() {
    return "git rev-parse --short HEAD".execute().text.trim()
}

android {
    compileSdk 34

    defaultConfig {
        namespace 'com.sevtinge.hyperceiler'
        applicationId namespace
        minSdk 30
        targetSdk 34
        versionCode 132
        versionName "2.3.132"
        project.archivesBaseName = "HyperCeiler"
        ndk {
            // noinspection ChromeOsAbiSupport
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }
        applicationVariants.configureEach { variant ->
            variant.outputs.configureEach {
                outputFileName = project.archivesBaseName + "_" + versionName + "(" + versionCode + ")_" + variant.buildType.name + ".apk"
            }
        }
    }

    buildFeatures {
        buildConfig = true
    }

    androidResources {
        generateLocaleConfig = true
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/**"
            excludes += "/kotlin/**"
            excludes += "/*.txt"
            excludes += "/*.bin"
            excludes += "/*.json"
        }
        dex {
            useLegacyPackaging = true
        }
    }

    def properties
    def propertiesFile = rootProject.file('signing.properties')
    if (propertiesFile.exists()) {
        properties = new Properties()
        properties.load(propertiesFile.newDataInputStream())
    }
    def getString = { String propertyName, String environmentName, String prompt ->
        return properties?.get(propertyName) ?: System.getenv(environmentName) ?:
            System.console()?.readLine('\n' + prompt + ': ')
    }
    def keyStoreFile = getString('storeFile', 'STORE_FILE', 'Store file')?.with(rootProject.&file)

    signingConfigs {
        hyperceiler {
            if (keyStoreFile != null) {
                storeFile keyStoreFile
                storePassword getString('storePassword', 'STORE_PASSWORD', 'Store password')
                keyAlias getString('keyAlias', 'KEY_ALIAS', 'Key alias')
                keyPassword getString('keyPassword', 'KEY_PASSWORD', 'Key password')
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-log.pro'
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now())
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
        beta {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now())
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
        canary {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now()) + "_" + getGitRevision()
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
        debug {
            versionNameSuffix "_" + DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now()) + "_" + getGitRevision()
            if (keyStoreFile != null) {
                signingConfig signingConfigs.hyperceiler
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_19
        targetCompatibility JavaVersion.VERSION_19
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_19.toString()
    }

}

dependencies {
    compileOnly(project(":hidden-api"))

    compileOnly files('libs/miui.jar')
    compileOnly files("libs/miui-framework.jar")

    compileOnly(roots.XposedApi)

    implementation 'org.luckypray:dexkit:2.0.0-rc7'
    // implementation 'org.luckypray:DexKit:1.1.8'
    //noinspection GradleDependency
    implementation 'io.github.biezhi:TinyPinyin:2.0.3.RELEASE'
    implementation 'com.github.kyuubiran:EzXHelper:2.0.8'
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.32.0"
    implementation "org.lsposed.hiddenapibypass:hiddenapibypass:4.3"
    implementation "com.google.code.gson:gson:2.10.1"
    implementation 'commons-codec:commons-codec:1.16.0'

    implementation roots.AndroidXCore
    implementation roots.AndroidXCollection
    implementation roots.AndroidXRecyclerview
    implementation roots.AndroidXFragment
    implementation roots.AndroidXLifecycle
    implementation roots.AndroidXVectorDrawable
    implementation roots.AndroidXVectorDrawableAnimated
    implementation roots.AndroidXCustomView
    implementation roots.AndroidXCustomViewPoolingContainer
    implementation roots.AndroidXConstraintLayout

    implementation files(roots.animation)
    implementation files(roots.appcompat)
    implementation files(roots.core)
    implementation files(roots.haptic)
    implementation files(roots.preference)
    implementation files(roots.smooth)
    implementation files(roots.springback)

    implementation files("libs/hyperceiler_expansion_packs-debug.aar")
}
